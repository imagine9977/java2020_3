package sec1;

public class SOLIDExam {
	public static void main(String[] args) {
		//SOLID : 객체 ㅣㅈ향 프로그래밍(OOPS:Object oriented programming software)의 5가지 설계원칙
		//SRP:(Single responsibility Principle): 단일 책임의 원칙: 해당모듈이 여러 대상 또는 액터들에 대해 책임을 가져서는 안되고, 오로지 하나의 액터에 대해서만 책임을 져야한다
		//OCP(Open Closed Principle) : 개방폐쇄 원칙 -  "확장에 대해 열려있고 수정에 대햇는 닫혀야 함)
		//LSP(Liskov Substitution Principle):리스코브 치환 원칙 - "하위타입은 상위 타입을 대체할 수 있어야 한다"
		//ISP(Interface Segregation Principle): 인터페이스 분리 원칙 - "하나의 객체라도 
		//DIP(Dependency Inversion Principle): 의존 역전 원칙 - "고수준 모듈은 저수준 모듈의 구현을 의존해서는 안되고, 저수준 모듈은 고수준 모듈에 의존해야한다. 
		//Dependency: 의존성 - 모든 필요한 기능 모듈을 처음 부터 전부 개발하여 만들 수 없기 때문에 개발자는 
		//			    애플리케이션이  기 만들어진 고수준 모듈에 의존하여 개발할 수 밖에 없는데 이를 의존성이라 한다 
		//GoF(Gang of Fout) Pattern: SOLID의 객체 지향 프로그래밍 설계 원칙에 의해 생겨난 자바의 디자인 패턴으로 공통적으로 발생하는 문제들을 예방할 수 있고 클래스의 재이용성을 높일 수 있다
		System.out.println();
	}
}
